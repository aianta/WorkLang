/* 
 * 	Copyright 2018 Alexandru Ianta
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * 	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 * 
 */

grammar org.worklang.Work with org.eclipse.xtext.common.Terminals

generate work "http://www.worklang.org/Work"


Model:
	fields += FieldDefinition*
;

FieldDefinition:
	'field'
	name = ID
	'{'
	(definitionSpace = DefinitionSpace)?
	(referenceSpace = ReferenceSpace)?
	(mapSpace = MapSpace)?
	(instanceSpace = InstanceSpace)?
	'}'
;

MapSpace:
	{MapSpace} 'mappings''{'
	mappedStates += StateMapping*
	mappedTransitions += TransitionMapping*
	'}'
;

StateMapping:
	'state' foreignState=[StateDefinition] 'from' field = [FieldDefinition] 'to' localState=[StateDefinition]
;

TransitionMapping:
	'transition' foreignTransition=[TransitionID] 'from' field = [FieldDefinition] 'to' localTransition=[TransitionID]
;


DefinitionSpace:
	{DefinitionSpace} 'definitions'
	'{'
	states += StateDefinition*
	transitions += TransitionDefinition*
	'}'
;

StateDefinition:
	PrimitiveStateDefinition|CompoundStateDefinition
;

PrimitiveStateDefinition:
	type = 'primitive'
	'state'
	name = ID
;

CompoundStateDefinition:
	type = 'compound'
	'state'
	name = ID
	composition= WithStatesDefinition
;

TransitionDefinition:
	PrimitiveTransitionDefinition|CompoundTransitionDefinition
;

PrimitiveTransitionDefinition:
	type = 'primitive'
	'transition'
	name = ID
	(in = InputDefinition)?
	out = OutputDefinition
;

CompoundTransitionDefinition:
	type = 'compound'
	'transition'
	name = ID
	(in = InputDefinition)?
	out = OutputDefinition
	composition = WithTransitionsDefinition
;

ReferenceSpace:
	{ReferenceSpace} 'references'
	'{'
	refStates += ReferenceState*
	refTransitions += ReferenceTransition*
	'}'
;

ReferenceTransition:
	'transition'
	refTransition = [TransitionDefinition]
	'from'
	foreignField = [FieldDefinition]
	
;

ReferenceState:
	'state'
 	refState = [StateDefinition]
	'from'
	foreignField = [FieldDefinition] 
;


InstanceSpace:
	{InstanceSpace} 'instances'
	'{'
	instances += Instance*
	'}'
;

WithStatesDefinition:
	'with'
	'{'
	predicate= Predicate
	'}'
;

WithTransitionsDefinition:
	'with'
	'{'
	transitions = TransitionalExpression
	'}'
;


InputDefinition:
	{InputDefinition} 'input' inputState += [StateDefinition]*
;

OutputDefinition:
	'output' outputState = [StateDefinition]
;

Instance:
	'instance' 
	(transitionDeclaration = TransitionDeclaration| stateDeclaration = StateDeclaration) 
	name = STRING 
	(state = StateInstance | transition = TransitionInstance)
;

TransitionDeclaration:
	'transition' transition = [TransitionDefinition]
;

StateDeclaration:
	'state' state = [StateDefinition]
;

TransitionInstance:
	host = STRING
	port = INT
	(path = STRING)?
;

StateInstance:
	 
	'{'
		members += (SetStatement| UseDefinition| Instance)+
	'}'
			
;

UseDefinition:
	'use' predefinedValue = [Instance] 
;

SetStatement:
	'set' variable = [StateDefinition] toDef = ToDefinition
;

ToDefinition:
	'to' value = STRING
;

//State Composition Expression Rules
Predicate:
	(negation?='NOT')? expression = BinaryExpression
;

BinaryExpression:
	TerminalBinaryExpression ({Operation.left=current}
		op= ('AND'|'OR') right = TerminalBinaryExpression)*
;

TerminalBinaryExpression returns BinaryExpression:
	'(' Predicate ')'|
	 {StateDefinition} instance = [StateDefinition]|
	 {StateDefinition}(list ?= 'setOf' value = [StateDefinition])
;


//Transition Composition Expression Rules
TransitionalExpression:
	TerminalTransitionalExpression ({Operation.left=current}
		op= 'THEN' right = TerminalTransitionalExpression)*	
;

TerminalTransitionalExpression returns TransitionalExpression:
	'(' TransitionalExpression ')'|
	{TransitionID} value = [TransitionID]
;




