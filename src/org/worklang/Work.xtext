/* 
 * 	Copyright 2018 Alexandru Ianta
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * 	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 * 
 */

grammar org.worklang.Work with org.eclipse.xtext.common.Terminals

import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

generate work "http://www.worklang.org/Work"


Model:
	fields += FieldDefinition*
;

FieldDefinition:
	'field'
	name = ID
	'{'
	(definitionSpace = DefinitionSpace)?
	(referenceSpace = ReferenceSpace)?
	(mapSpace = MapSpace)?
	(instanceSpace = InstanceSpace)?
	'}'
;

MapSpace:
	{MapSpace} 'mappings''{'
	mappedStates += StateMapping*
	mappedTransitions += TransitionMapping*
	'}'
;

StateMapping:
	'state' foreignState=[StateDefinition] 'from' field = [FieldDefinition] 'to' localState=[StateDefinition]
;

TransitionMapping:
	'transition' foreignTransition=[TransitionDefinition] 'from' field = [FieldDefinition] 'to' localTransition=[TransitionDefinition]
;


DefinitionSpace:
	{DefinitionSpace} 'definitions'
	'{'
	states += StateDefinition*
	transitions += TransitionDefinition*
	'}'
;

StateDefinition:
	PrimitiveStateDefinition|CompoundStateDefinition
;

PrimitiveStateDefinition:
	type = 'primitive'
	'state'
	name = ID
;

CompoundStateDefinition:
	type = 'compound'
	'state'
	name = ID
	composition= WithStatesDefinition
;

TransitionDefinition:
	PrimitiveTransitionDefinition|CompoundTransitionDefinition
;

PrimitiveTransitionDefinition:
	type = 'primitive'
	'transition'
	name = ID
	(in = InputDefinition)?
	out = OutputDefinition
;

CompoundTransitionDefinition:
	type = 'compound'
	'transition'
	name = ID
	(in = InputDefinition)?
	out = OutputDefinition
	composition = TransitionComposition
;

ReferenceSpace:
	{ReferenceSpace} 'references'
	'{'
	refStates += ReferenceState*
	refTransitions += ReferenceTransition*
	'}'
;

ReferenceTransition:
	'transition'
	refTransition = [TransitionDefinition]
	'from'
	foreignField = [FieldDefinition]
	
;

ReferenceState:
	'state'
 	refState = [StateDefinition]
	'from'
	foreignField = [FieldDefinition] 
;


InstanceSpace:
	{InstanceSpace} 'instances'
	'{'
	instances += Instance*
	'}'
;

WithStatesDefinition:
	'with'
	'{'
	predicate= Predicate
	'}'
;


InputDefinition:
	{InputDefinition} 'input' inputState += [StateDefinition]*
;

OutputDefinition:
	'output' outputState = [StateDefinition]
;

Instance:
	'instance' 
	(transitionDeclaration = TransitionDeclaration| stateDeclaration = StateDeclaration)
	isCollectionElement ?= ('collectionElement')? 
	(name = STRING| name = COLLECTION_ELEMENT_NAME) 
	(state = StateInstance | transition = TransitionInstance| compoundTransition = CompoundTransitionInstance| collection = CollectionInstance)
;

TransitionDeclaration:
	'transition' transition = [TransitionDefinition]
;

StateDeclaration:
	'state' state = [StateDefinition]
;

TransitionInstance:
	host = STRING
	port = INT
	(path = STRING)?
	supportCollections?= ('hasCollectionSupport')?
;

StateInstance:
	'{'
		members += (SetStatement| UseDefinition| Instance)+
	'}'
			
;

CollectionInstance:
	'['
		elements += [Instance|COLLECTION_ELEMENT_NAME]+
	']'
;

terminal COLLECTION_ELEMENT_NAME:
	('#' ID '#' INT '#' ID?)
;

UseDefinition:
	('use' predefinedValue = [Instance|STRING])|('use' predefinedValue = [Instance|COLLECTION_ELEMENT_NAME]) 
;

SetStatement:
	'set' variable = [StateDefinition] toDef = ToDefinition
;

ToDefinition:
	'to' value = STRING
;

//State Composition Expression Rules
Predicate:
	(negation?='NOT')? expression = BinaryExpression
;

BinaryExpression:
	TerminalBinaryExpression ({Operation.left=current}
		op= ('AND'|'OR') right = TerminalBinaryExpression)*
;

TerminalBinaryExpression returns BinaryExpression:
	'(' Predicate ')'|
	 {StateDefinition} instance = [StateDefinition]|
	 {StateDefinition}(list ?= 'collectionOf' instance = [StateDefinition])
;


TransitionComposition:
	'{'
		body = TransitionCompositionBody
	'}'
;

TransitionCompositionBody:
	'START' ('WITH' '(' startingInputs += [StateDefinition]+')')?
	'{'
		expression = InstructionExpression
	'}'
;

InstructionExpression:
	TerminalInstruction ({ExecutionResult.computeFirst = current} computeNext = TerminalInstruction)*
;

TerminalInstruction returns InstructionExpression:
	IfInstruction|
	WhileInstruction|
	SimpleInstruction|
	';'
;

IfInstruction:
	'IF' '(' testKey = ResolvableValue '=' testValue = TestValue ')' 
	'{'
		toComputeIfTrue = InstructionExpression
	'}' ('ELSE' '{'
		toComputeIfFalse = InstructionExpression
	'}')?
;

WhileInstruction:
	'WHILE''(' testKey = ResolvableValue '=' testValue = TestValue ')'
	'{'
		toCompute = InstructionExpression
	'}'
;

SimpleInstruction:
	'THEN' toExecute += [TransitionDefinition]+
;

CompoundTransitionInstance:
	'{'
		body = CompoundTransitionInstanceBody
	'}'
;

CompoundTransitionInstanceBody:
	'START' ('WITH''('startingInputs += [Instance]+')')?
	'{'
		expression = InstanceInstructionExpression
	'}'
;

InstanceInstructionExpression:
	TerminalInstanceInstruction ({ExecutionResult.computeFirst = current} computeNext = TerminalInstanceInstruction)*
;


TerminalInstanceInstruction returns InstanceInstructionExpression:
	//'('InstructionExpression')' |
	IfInstanceInstruction |
	WhileInstanceInstruction|
	SimpleInstanceInstruction |
	';'
;

SimpleInstanceInstruction:
	 'THEN' toExecute += [Instance|STRING]+
;

IfInstanceInstruction:
	'IF' '(' testKey = ResolvableValue '=' testValue = TestValue ')' 
	'{'
		toComputeIfTrue = InstanceInstructionExpression
	'}' ('ELSE' '{'
		toComputeIfFalse = InstanceInstructionExpression
	'}')?
;



WhileInstanceInstruction:
	'WHILE''(' testKey = ResolvableValue '=' testValue = TestValue ')'
	'{'
		toCompute = InstanceInstructionExpression
	'}'
;

TestValue:
	 LiteralValue| ResolvableValue
;

LiteralValue:
	value = STRING
;

ResolvableValue:
	(ResolvableInstanceValue|ResolvableTransitionOutputValue)
;

ResolvableInstanceValue:
	instance = [Instance] '.' key = [StateDefinition]
;

ResolvableTransitionOutputValue:
	'OUTPUT' state = [StateDefinition] '.' key = [StateDefinition]
;



