/*
 * generated by Xtext 2.12.0
 */
package org.worklang.generator

import com.google.inject.Inject
import com.google.inject.Provider
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.generator.GeneratorContext
import org.eclipse.xtext.generator.GeneratorDelegate
import org.eclipse.xtext.generator.JavaIoFileSystemAccess
import org.eclipse.xtext.util.CancelIndicator
import org.eclipse.xtext.validation.CheckMode
import org.eclipse.xtext.validation.IResourceValidator
import org.worklang.WorkStandaloneSetup
import io.vertx.core.Vertx
import io.vertx.core.http.HttpServer
import io.vertx.core.http.HttpServerOptions

class Main {
	
	static Vertx vertx = Vertx.vertx(); 

	def static main(String[] args) {
		
		/* Actual Interpreter asshattery below
		 *
		 */

//		if (args.empty) {
//			System::err.println('Aborting: no path to EMF resource provided!')
//			return
//		}
		val injector = new WorkStandaloneSetup().createInjectorAndDoEMFRegistration
		val main = injector.getInstance(Main)
//		main.runGenerator(args.get(0))

		/*
		 * Vertx Code
		 */
		
		val HttpServerOptions options = new HttpServerOptions
		options.port = 9000
		
		val HttpServer server = vertx.createHttpServer(options)
	
		server.requestHandler[
			println("Got request: " + uri)
			
			response.end("WorkLang Interpretor says Hi!")
		].listen

		println("Work Interpreter Ran!")
		
		return
	}

	@Inject Provider<ResourceSet> resourceSetProvider

	@Inject IResourceValidator validator

	@Inject GeneratorDelegate generator

	@Inject JavaIoFileSystemAccess fileAccess

	def protected runGenerator(String string) {
		// Load the resource
		val set = resourceSetProvider.get
		val resource = set.getResource(URI.createFileURI(string), true)

		// Validate the resource
		val issues = validator.validate(resource, CheckMode.ALL, CancelIndicator.NullImpl)
		if (!issues.empty) {
			issues.forEach[System.err.println(it)]
			return
		}

		// Configure and start the generator
		fileAccess.outputPath = 'src-gen/'
		val context = new GeneratorContext => [
			cancelIndicator = CancelIndicator.NullImpl
		]
		generator.generate(resource, fileAccess, context)
		System.out.println('Code generation finished.')
	}
}
